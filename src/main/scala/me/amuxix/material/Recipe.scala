package me.amuxix.material

import cats.data.NonEmptyList
import me.amuxix.Energy
import me.amuxix.bukkit.{Configuration, Recipes}
import me.amuxix.logging.Logger
import me.amuxix.material.Generic.Slab
import me.amuxix.material.Material._

/**
  * Created by Amuxix on 08/01/2017.
  */
object Recipe {
  def apply(choices: NonEmptyList[Material], result: Material) = new Recipe(NonEmptyList.one(choices), result, 1, requiresFuel = false)
  def apply(ingredient: Material, result: Material, craftedAmount: Double = 1, requiresFuel: Boolean = false): Recipe = new Recipe(NonEmptyList.one(NonEmptyList.one(ingredient)), result, craftedAmount, requiresFuel)

  val foodQuality: Double = 11/3 //Bread has 11 quality and takes 3 wheat to craft, so each quality is worth 3/11 * Wheat.
  private val quartzBlocks: NonEmptyList[Material] = NonEmptyList.of(QuartzBlock, QuartzPillar)
  private val redSandStoneBlocks: NonEmptyList[Material] = NonEmptyList.of(RedSandstone, CutRedSandstone)
  private val sandStoneBlocks: NonEmptyList[Material] = NonEmptyList.of(Sandstone, CutSandstone)
  private val stoneBrickBlocks: NonEmptyList[Material] = NonEmptyList.of(StoneBrick, MossyStoneBricks, CrackedStoneBricks)

  /**
    * The Recipe generated by this circumvents the circular dependency of Slabs and Chiseled blocks.
    */
  private def slabRecipe(blocks: NonEmptyList[Material], slab: Material with Slab): Recipe =
    Recipe(NonEmptyList.of(blocks, blocks, blocks), slab, 6, requiresFuel = false)
  private val energyRecipes = Set(
    //region Ores
    Recipe(Coal, CoalOre, 1 / Configuration.oreMultiplier),
    Recipe(IronIngot, IronOre, 1 / Configuration.oreMultiplier),
    Recipe(LapisLazuli, LapisLazuliOre, 1 / (6 * Configuration.oreMultiplier)),
    Recipe(GoldIngot, GoldOre, 1 / Configuration.oreMultiplier),
    Recipe(Diamond, DiamondOre, 1 / Configuration.oreMultiplier),
    Recipe(Redstone, RedstoneOre, 1 / 4.5 * Configuration.oreMultiplier),
    Recipe(Emerald, EmeraldOre, 1 / Configuration.oreMultiplier),
    Recipe(Quartz, QuartzOre, 1 / Configuration.oreMultiplier),
    
    Recipe(CoalOre, Coal, Configuration.oreMultiplier),
    Recipe(IronOre, IronIngot, Configuration.oreMultiplier),
    Recipe(LapisLazuliOre, LapisLazuli, (6 * Configuration.oreMultiplier)),
    Recipe(GoldOre, GoldIngot, Configuration.oreMultiplier),
    Recipe(DiamondOre, Diamond, Configuration.oreMultiplier),
    Recipe(RedstoneOre, Redstone, 4.5 * Configuration.oreMultiplier),
    Recipe(EmeraldOre, Emerald, Configuration.oreMultiplier),
    Recipe(QuartzOre, Quartz, Configuration.oreMultiplier),
    //endregion
    //region Misc
    Recipe(Redstone, RedstoneWire, 1 / Configuration.craftingMultiplier),
    Recipe(Torch, WallTorch, 1 / Configuration.craftingMultiplier),
    Recipe(RedstoneTorch, RedstoneWallTorch, 1 / Configuration.craftingMultiplier),
    Recipe(Dirt, Farmland),
    Recipe(GoldOre, SoulSand, 2),
    Recipe(String, Tripwire, 1 / Configuration.craftingMultiplier),
    Recipe(Dirt, GrassPath),
    Recipe(Ice, FrostedIce),
    Recipe(Water, BubbleColumn),
    Recipe(Pumpkin, CarvedPumpkin),
    Recipe(BeetrootSeeds, BeetrootPlantation),
    Recipe(Gravel, Flint, .5),
    Recipe(Anvil, ChippedAnvil, (1 / Configuration.craftingMultiplier) * 2/3),
    Recipe(ChippedAnvil, DamagedAnvil, (1 / Configuration.craftingMultiplier) * 1/2),
    slabRecipe(quartzBlocks, QuartzSlab),
    slabRecipe(redSandStoneBlocks, RedSandstoneSlab),
    slabRecipe(sandStoneBlocks, SandstoneSlab),
    slabRecipe(stoneBrickBlocks, StoneBrickSlab),
    //endregion
    //region Chainmail
    Recipe(IronHelmet, ChainmailHelmet, 1 / Configuration.chainmailMultiplier),
    Recipe(IronChestplate, ChainmailChestplate, 1 / Configuration.chainmailMultiplier),
    Recipe(IronLeggings, ChainmailLeggings, 1 / Configuration.chainmailMultiplier),
    Recipe(IronBoots, ChainmailBoots, 1 / Configuration.chainmailMultiplier),
    //endregion
    //region Buckets
    Recipe(NonEmptyList.of(Bucket, Water), WaterBucket),
    Recipe(NonEmptyList.of(Bucket, Lava), LavaBucket),
    Recipe(NonEmptyList.of(Bucket, Milk), MilkBucket),
    Recipe(NonEmptyList.of(Bucket, Pufferfish), PufferfishBucket),
    Recipe(NonEmptyList.of(Bucket, RawSalmon), SalmonBucket),
    Recipe(NonEmptyList.of(Bucket, Cod), CodBucket),
    Recipe(NonEmptyList.of(Bucket, TropicalFish), TropicalFishBucket),
    //endregion
    //region Food
    //The multiplier on quality is the Food Points + Saturation, which represents how "long" the food will last
    Recipe(Wheat, RabbitStew, 1 / foodQuality * 22),
    Recipe(Wheat, CookedPorkchop, 1 / foodQuality * 20.8),
    Recipe(Wheat, CookedBeef, 1 / foodQuality * 20.8),
    Recipe(Wheat, GoldenCarrot, 1 / foodQuality * 20.4),
    Recipe(Wheat, Cake, 1 / foodQuality * 16.8),
    Recipe(Wheat, CookedMutton, 1 / foodQuality * 15.6),
    Recipe(Wheat, CookedSalmon, 1 / foodQuality * 15.6),
    Recipe(Wheat, GoldenApple, 1 / foodQuality * 13.6),
    Recipe(Wheat, EnchantedGoldenApple, 1 / foodQuality * 13.6),
    Recipe(Wheat, BeetrootSoup, 1 / foodQuality * 13.2),
    Recipe(Wheat, CookedChicken, 1 / foodQuality * 13.2),
    Recipe(Wheat, MushroomStew, 1 / foodQuality * 13.2),
    Recipe(Wheat, SuspiciousStew, 1 / foodQuality * 13.2),
    Recipe(Wheat, PumpkinPie, 1 / foodQuality * 12.8),
    Recipe(Wheat, BakedPotato, 1 / foodQuality * 11),
    Recipe(Wheat, Bread, 1 / foodQuality * 11),
    Recipe(Wheat, CookedCod, 1 / foodQuality * 11),
    Recipe(Wheat, CookedRabbit, 1 / foodQuality * 11),
    Recipe(Wheat, Carrots, 1 / foodQuality * 6.6),
    Recipe(Wheat, Apple, 1 / foodQuality * 6.4),
    Recipe(Wheat, ChorusFruit, 1 / foodQuality * 6.4),
    Recipe(Wheat, SpiderEye, 1 / foodQuality * 5.2),
    Recipe(Wheat, RawBeef, 1 / foodQuality * 4.8),
    Recipe(Wheat, RawPorkchop, 1 / foodQuality * 4.8),
    Recipe(Wheat, RawRabbit, 1 / foodQuality * 4.8),
    Recipe(Wheat, RottenFlesh, 1 / foodQuality * 4.8),
    Recipe(Wheat, MelonSlice, 1 / foodQuality * 3.2),
    Recipe(Wheat, PoisonousPotato, 1 / foodQuality * 3.2),
    Recipe(Wheat, RawChicken, 1 / foodQuality * 3.2),
    Recipe(Wheat, RawMutton, 1 / foodQuality * 3.2),
    Recipe(Wheat, Cookie, 1 / foodQuality * 2.4),
    Recipe(Wheat, Cod, 1 / foodQuality * 2.4),
    Recipe(Wheat, RawSalmon, 1 / foodQuality * 2.4),
    Recipe(Wheat, SweetBerries, 1 / foodQuality * 2.4),
    Recipe(Wheat, Beetroot, 1 / foodQuality * 2.2),
    Recipe(Wheat, Potatoes, 1 / foodQuality * 1.6),
    Recipe(Wheat, TropicalFish, 1 / foodQuality * 1.2),
    Recipe(Wheat, Pufferfish, 1 / foodQuality * 1.2),
    //endregion
    //region Food
    Recipe(AcaciaLog, StrippedAcaciaLog),
    Recipe(AcaciaWood, StrippedAcaciaWood),
    Recipe(BirchLog, StrippedBirchLog),
    Recipe(BirchWood, StrippedBirchWood),
    Recipe(DarkOakLog, StrippedDarkOakLog),
    Recipe(DarkOakWood, StrippedDarkOakWood),
    Recipe(JungleLog, StrippedJungleLog),
    Recipe(JungleWood, StrippedJungleWood),
    Recipe(OakLog, StrippedOakLog),
    Recipe(OakWood, StrippedOakWood),
    Recipe(SpruceLog, StrippedSpruceLog),
    Recipe(SpruceWood, StrippedSpruceWood),
    //endregion
    //region Banners
    Recipe(BlackBanner, BlackWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(BlueBanner, BlueWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(BrownBanner, BrownWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(CyanBanner, CyanWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(GrayBanner, GrayWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(GreenBanner, GreenWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(LightBlueBanner, LightBlueWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(LightGrayBanner, LightGrayWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(LimeBanner, LimeWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(MagentaBanner, MagentaWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(OrangeBanner, OrangeWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(PinkBanner, PinkWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(PurpleBanner, PurpleWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(RedBanner, RedWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(WhiteBanner, WhiteWallBanner, 1 / Configuration.craftingMultiplier),
    Recipe(YellowBanner, YellowWallBanner, 1 / Configuration.craftingMultiplier),
    //endregion
    //region Banner Pattern
    Recipe(NonEmptyList.of(Paper, EnchantedGoldenApple), MojangBannerPattern),
    Recipe(NonEmptyList.of(Paper, WitherSkeletonSkull), SkullBannerPattern),
    Recipe(NonEmptyList.of(Paper, CreeperHead), CreeperBannerPattern),
    Recipe(NonEmptyList.of(Paper, OxeyeDaisy), FlowerBannerPattern),
    Recipe(Emerald, GlobeBannerPattern, 1 / 8), //This pattern is sold by villagers for 8 emeralds
    //endregion
    //region Signs
    Recipe(AcaciaSign, AcaciaWallSign, 1 / Configuration.craftingMultiplier),
    Recipe(BirchSign, BirchWallSign, 1 / Configuration.craftingMultiplier),
    Recipe(DarkOakSign, DarkOakWallSign, 1 / Configuration.craftingMultiplier),
    Recipe(JungleSign, JungleWallSign, 1 / Configuration.craftingMultiplier),
    Recipe(OakSign, OakWallSign, 1 / Configuration.craftingMultiplier),
    Recipe(SpruceSign, SpruceWallSign, 1 / Configuration.craftingMultiplier),
    //endregion
    //region Mob Heads
    Recipe(CreeperHead, CreeperWallHead, 1 / Configuration.craftingMultiplier),
    Recipe(DragonHead, DragonWallHead, 1 / Configuration.craftingMultiplier),
    Recipe(SkeletonSkull, SkeletonWallSkull, 1 / Configuration.craftingMultiplier),
    Recipe(WitherSkeletonSkull, WitherSkeletonWallSkull, 1 / Configuration.craftingMultiplier),
    Recipe(ZombieHead, ZombieWallHead, 1 / Configuration.craftingMultiplier),
    //endregion
    //region Flower pots
    Recipe(NonEmptyList.of(FlowerPot, AcaciaSapling), PottedAcaciaSapling),
    Recipe(NonEmptyList.of(FlowerPot, Allium), PottedAllium),
    Recipe(NonEmptyList.of(FlowerPot, AzureBluet), PottedAzureBluet),
    Recipe(NonEmptyList.of(FlowerPot, Bamboo), PottedBamboo),
    Recipe(NonEmptyList.of(FlowerPot, BirchSapling), PottedBirchSapling),
    Recipe(NonEmptyList.of(FlowerPot, BlueOrchid), PottedBlueOrchid),
    Recipe(NonEmptyList.of(FlowerPot, BrownMushroom), PottedBrownMushroom),
    Recipe(NonEmptyList.of(FlowerPot, Cactus), PottedCactus),
    Recipe(NonEmptyList.of(FlowerPot, Cornflower), PottedCornflower),
    Recipe(NonEmptyList.of(FlowerPot, Dandelion), PottedDandelion),
    Recipe(NonEmptyList.of(FlowerPot, DarkOakSapling), PottedDarkOakSapling),
    Recipe(NonEmptyList.of(FlowerPot, DeadBush), PottedDeadBush),
    Recipe(NonEmptyList.of(FlowerPot, Fern), PottedFern),
    Recipe(NonEmptyList.of(FlowerPot, JungleSapling), PottedJungleSapling),
    Recipe(NonEmptyList.of(FlowerPot, LilyOfTheValley), PottedLilyOfTheValley),
    Recipe(NonEmptyList.of(FlowerPot, OakSapling), PottedOakSapling),
    Recipe(NonEmptyList.of(FlowerPot, OrangeTulip), PottedOrangeTulip),
    Recipe(NonEmptyList.of(FlowerPot, OxeyeDaisy), PottedOxeyeDaisy),
    Recipe(NonEmptyList.of(FlowerPot, PinkTulip), PottedPinkTulip),
    Recipe(NonEmptyList.of(FlowerPot, Poppy), PottedPoppy),
    Recipe(NonEmptyList.of(FlowerPot, RedMushroom), PottedRedMushroom),
    Recipe(NonEmptyList.of(FlowerPot, RedTulip), PottedRedTulip),
    Recipe(NonEmptyList.of(FlowerPot, SpruceSapling), PottedSpruceSapling),
    Recipe(NonEmptyList.of(FlowerPot, WhiteTulip), PottedWhiteTulip),
    Recipe(NonEmptyList.of(FlowerPot, WitherRose), PottedWitherRose),
    //endregion
    //region Shulker Boxes
    Recipe(NonEmptyList.of(ShulkerBox, BoneMeal), WhiteShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, OrangeDye), OrangeShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, MagentaDye), MagentaShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, LightBlueDye), LightBlueShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, YellowDye), YellowShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, LimeDye), LimeShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, PinkDye), PinkShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, GrayDye), GrayShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, LightGrayDye), LightGrayShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, CyanDye), CyanShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, PurpleDye), PurpleShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, LapisLazuli), BlueShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, CocoaBeans), BrownShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, GreenDye), GreenShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, RoseBush), RedShulkerBox),
    Recipe(NonEmptyList.of(ShulkerBox, InkSac), BlackShulkerBox),
    //endregion
    //region Concrete
    Recipe(NonEmptyList.of(Water, WhiteConcretePowder), WhiteConcrete),
    Recipe(NonEmptyList.of(Water, OrangeConcretePowder), OrangeConcrete),
    Recipe(NonEmptyList.of(Water, MagentaConcretePowder), MagentaConcrete),
    Recipe(NonEmptyList.of(Water, LightBlueConcretePowder), LightBlueConcrete),
    Recipe(NonEmptyList.of(Water, YellowConcretePowder), YellowConcrete),
    Recipe(NonEmptyList.of(Water, LimeConcretePowder), LimeConcrete),
    Recipe(NonEmptyList.of(Water, PinkConcretePowder), PinkConcrete),
    Recipe(NonEmptyList.of(Water, GrayConcretePowder), GrayConcrete),
    Recipe(NonEmptyList.of(Water, LightGrayConcretePowder), LightGrayConcrete),
    Recipe(NonEmptyList.of(Water, CyanConcretePowder), CyanConcrete),
    Recipe(NonEmptyList.of(Water, PurpleConcretePowder), PurpleConcrete),
    Recipe(NonEmptyList.of(Water, BlueConcretePowder), BlueConcrete),
    Recipe(NonEmptyList.of(Water, BrownConcretePowder), BrownConcrete),
    Recipe(NonEmptyList.of(Water, GreenConcretePowder), GreenConcrete),
    Recipe(NonEmptyList.of(Water, RedConcretePowder), RedConcrete),
    Recipe(NonEmptyList.of(Water, BlackConcretePowder), BlackConcrete),
    //endregion
    //region 1.14 Smooth blocks
    /*Recipe(QuartzBlock, SmoothQuartz, requiresFuel = true),
    Recipe(RedSandstone, SmoothRedSandstone, requiresFuel = true),
    Recipe(Sandstone, SmoothSandstone, requiresFuel = true),
    Recipe(Stone, SmoothStone, requiresFuel = true),*/
    //endregion
  )

  val recipes: Set[Recipe] = Recipes.bukkitRecipes ++ energyRecipes
}

case class Recipe(ingredients: NonEmptyList[NonEmptyList[Material]], result: Material, craftedAmount: Double, requiresFuel: Boolean) {
  /**
    * Tries to update the energy of the resulting material of this recipe
    * @return True when energy was changed false otherwise.
    */
  def updateResultEnergy(): Boolean = {
    //Logger.info(this)
    if (ingredients.exists(_.exists(_.energy.isEmpty))) {
      //No energy for some ingredients
      false
    } else {
      val ingredientsEnergy = ingredients.foldLeft(0.0) {
        case (total, possibilities) => total + possibilities.toList.flatMap(_.energy).map(_.value).min
      }
      val fuelEnergy: Energy = if (requiresFuel) Generic.cheapestSmeltEnergy else 0 Energy
      val newEnergy: Energy = ((ingredientsEnergy / craftedAmount) * Configuration.craftingMultiplier + fuelEnergy.value).ceil.toInt

      result.energy.filter(newEnergy >= _).fold {
        Logger.trace(s"${result.name}: ${result.energy.fold("No Set")(_.toString)} -> $newEnergy")
        result.energy = newEnergy
        true
      }(_ => false)
    }
  }
}
